- timeit
python -m timeit -n 5 -r 5 -s 'import julia' 'julia.calc_pure_python(draw_output=False, desired_width=1000, max_iterations=300)'
5 loops, best of 5: 5.03 sec per loop



- /usr/bin/time 
/usr/bin/time -p --verbose python julia.py

Length of x: 1000
Total elements: 1000000
calculate_z_serial_purepython took 4.974495887756348 seconds
	Command being timed: "python julia.py"
	User time (seconds): 6.18
	System time (seconds): 0.58
	Percent of CPU this job got: 115%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:05.88
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 143628
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 40975
	Voluntary context switches: 40
	Involuntary context switches: 210
	Swaps: 0
	File system inputs: 0
	File system outputs: 0
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0



- cProfile
python -m cProfile -s cumulative -o julia_profile.stats julia.py
import pstats
p = pstats.Stats('julia_profile.stats')
p.sort_stats('cumulative')
p.print_stats(15)

Thu Oct 31 11:13:39 2019    julia_profile.stats

         36221991 function calls in 7.808 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    7.808    7.808 {built-in method builtins.exec}
        1    0.025    0.025    7.808    7.808 julia.py:5(<module>)
        1    0.382    0.382    7.783    7.783 julia.py:42(calc_pure_python)
        1    5.351    5.351    7.324    7.324 julia.py:28(calculate_z_serial_purepython)
 34219980    1.973    0.000    1.973    0.000 {built-in method builtins.abs}
  2002000    0.074    0.000    0.074    0.000 {method 'append' of 'list' objects}
        1    0.003    0.003    0.003    0.003 {built-in method builtins.sum}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.print}
        2    0.000    0.000    0.000    0.000 {built-in method time.time}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


p.print_callers()

   Ordered by: cumulative time

Function                                          was called by...
                                                      ncalls  tottime  cumtime
{built-in method builtins.exec}                   <- 
julia.py:5(<module>)                              <-       1    0.025    7.808  {built-in method builtins.exec}
julia.py:42(calc_pure_python)                     <-       1    0.382    7.783  julia.py:5(<module>)
julia.py:28(calculate_z_serial_purepython)        <-       1    5.351    7.324  julia.py:42(calc_pure_python)
{built-in method builtins.abs}                    <- 34219980    1.973    1.973  julia.py:28(calculate_z_serial_purepython)
{method 'append' of 'list' objects}               <- 2002000    0.074    0.074  julia.py:42(calc_pure_python)
{built-in method builtins.sum}                    <-       1    0.003    0.003  julia.py:42(calc_pure_python)
{built-in method builtins.print}                  <-       1    0.000    0.000  julia.py:42(calc_pure_python)
{built-in method time.time}                       <-       2    0.000    0.000  julia.py:42(calc_pure_python)
{built-in method builtins.len}                    <-       2    0.000    0.000  julia.py:28(calculate_z_serial_purepython)
{method 'disable' of '_lsprof.Profiler' objects}  <- 




-line_profiler

kernprof -l -v julia.py

Length of x: 1000
Total elements: 1000000
calculate_z_serial_purepython took 61.14969348907471 seconds
Wrote profile results to julia.py.lprof
Timer unit: 1e-06 s

Total time: 36.7599 s
File: julia.py
Function: calculate_z_serial_purepython at line 14

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           @profile
    15                                           def calculate_z_serial_purepython(maxiter, zs, cs):
    16                                               """Calculate output list using Julia update rule"""
    17         1       2501.0   2501.0      0.0      output = [0] * len(zs)
    18   1000001     307756.0      0.3      0.8      for i in range(len(zs)):
    19   1000000     297591.0      0.3      0.8          n = 0
    20   1000000     315375.0      0.3      0.9          z = zs[i]
    21   1000000     308530.0      0.3      0.8          c = cs[i]
    22  34219980   13592634.0      0.4     37.0          while abs(z) < 2 and n < maxiter:
    23  33219980   11343165.0      0.3     30.9              z = z * z + c
    24  33219980   10279325.0      0.3     28.0              n += 1
    25   1000000     313027.0      0.3      0.9          output[i] = n
    26         1          1.0      1.0      0.0      return output




-dis

import dis
from julia import calculate_z_serial_purepython
dis.dis(calculate_z_serial_purepython)



- heapy

heapy after creating y and x lists of floats
Partition of a set of 2005 objects. Total size = 66528 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0   2002 100    48048  72     48048  72 float
     1      2   0    18048  27     66096  99 list
     2      1   0      432   1     66528 100 types.FrameType

heapy after creating zs and cs using complex numbers
Partition of a set of 2002005 objects. Total size = 81461408 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0 2000000 100 64000000  79  64000000  79 complex
     1      4   0 17412976  21  81412976 100 list
     2   2000   0    48000   0  81460976 100 float
     3      1   0      432   0  81461408 100 types.FrameType

calculate_z_serial_purepython took 4.41413140296936 seconds

heapy after calling calculate_z_serial_purepython
Partition of a set of 2102377 objects. Total size = 92271848 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0 2000000  95 64000000  69  64000000  69 complex
     1      5   0 25413040  28  89413040  97 list
     2 100368   5  2810304   3  92223344 100 int
     3   2003   0    48072   0  92271416 100 float
     4      1   0      432   0  92271848 100 types.FrameType



- perf 

perf stat -e cycles,stalled-cycles-frontend,stalled-cycles-backend,instructions,cache-references,cache-misses,branches,branch-misses,task-clock,faults,minor-faults,cs,migrations -r 3 python julia.py

Performance counter stats for 'python julia.py' (3 runs):

    18.864.777.330      cycles                    #    3,863 GHz                      ( +-  3,98% )  (66,64%)
   <not supported>      stalled-cycles-frontend                                     
   <not supported>      stalled-cycles-backend                                      
    58.961.663.075      instructions              #    3,13  insn per cycle           ( +-  3,52% )  (83,32%)
        17.558.078      cache-references          #    3,595 M/sec                    ( +-  0,98% )  (83,32%)
         8.795.669      cache-misses              #   50,095 % of all cache refs      ( +-  2,08% )  (83,33%)
    12.099.589.058      branches                  # 2477,553 M/sec                    ( +-  4,23% )  (83,37%)
        27.608.349      branch-misses             #    0,23% of all branches          ( +-  0,21% )  (83,35%)
          4.883,68 msec task-clock                #    1,000 CPUs utilized            ( +-  3,51% )
            25.545      faults                    #    0,005 M/sec                    ( +-  0,00% )
            25.545      minor-faults              #    0,005 M/sec                    ( +-  0,00% )
                16      cs                        #    0,003 K/sec                    ( +- 11,36% )
                 0      migrations                #    0,000 K/sec                  

             4,884 +- 0,171 seconds time elapsed  ( +-  3,51% )
