\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+c1}{\PYGZsh{} Here we create a lambda function and assign a name to it (ironically)}
\PYG{n}{multiply} \PYG{o}{=} \PYG{k}{lambda} \PYG{n}{x}\PYG{p}{,} \PYG{n}{y}\PYG{p}{:} \PYG{n}{x} \PYG{o}{*} \PYG{n}{y}
\PYG{c+c1}{\PYGZsh{} Use it}
\PYG{n+nb}{print}\PYG{p}{(}\PYG{n}{multiply}\PYG{p}{(}\PYG{l+m+mi}{5}\PYG{p}{,} \PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{p}{))}

\PYG{c+c1}{\PYGZsh{} Typical use is inside generator expressions}
\PYG{n}{numbers} \PYG{o}{=} \PYG{n+nb}{range}\PYG{p}{(}\PYG{l+m+mi}{10}\PYG{p}{)}
\PYG{n}{squares} \PYG{o}{=} \PYG{n+nb}{list}\PYG{p}{(}\PYG{n+nb}{map}\PYG{p}{(}\PYG{k}{lambda} \PYG{n}{n}\PYG{p}{:} \PYG{n}{n}\PYG{o}{**}\PYG{l+m+mi}{2}\PYG{p}{,} \PYG{n}{numbers}\PYG{p}{))}
\PYG{n+nb}{print}\PYG{p}{(}\PYG{n}{squares}\PYG{p}{)}

\PYG{c+c1}{\PYGZsh{} However, remeber that you can do the same with list comprehension}
\PYG{n}{squares} \PYG{o}{=} \PYG{p}{[}\PYG{n}{n}\PYG{o}{**}\PYG{l+m+mi}{2} \PYG{k}{for} \PYG{n}{n} \PYG{o+ow}{in} \PYG{n}{numbers}\PYG{p}{]}
\PYG{n+nb}{print}\PYG{p}{(}\PYG{n}{squares}\PYG{p}{)}
\end{Verbatim}
