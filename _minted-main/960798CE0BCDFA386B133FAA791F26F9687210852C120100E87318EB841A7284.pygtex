\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{class} \PYG{n+nc}{CallCounter}\PYG{p}{:}
  
    \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}Wrap a generic function and count the number of times it is called\PYGZdq{}\PYGZdq{}\PYGZdq{}}
    
    \PYG{k}{def} \PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{func}\PYG{p}{):}
        \PYG{c+c1}{\PYGZsh{} We accept as input a function and store it (privately)}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{\PYGZus{}func} \PYG{o}{=} \PYG{n}{func}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{num\PYGZus{}calls} \PYG{o}{=} \PYG{l+m+mi}{0}
    
    \PYG{k}{def} \PYG{n+nf+fm}{\PYGZus{}\PYGZus{}call\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{o}{*}\PYG{n}{args}\PYG{p}{,} \PYG{o}{**}\PYG{n}{kwargs}\PYG{p}{):}
        \PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{} This is the method doing the trick. We use *args and **kwargs to}
\PYG{l+s+sd}{        pass all possible arguments to the function that we are wrapping\PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{c+c1}{\PYGZsh{} We increment the counter}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{num\PYGZus{}calls} \PYG{o}{+=} \PYG{l+m+mi}{1}
        \PYG{c+c1}{\PYGZsh{} And here we just return whatever the wrapped function returns}
        \PYG{k}{return} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{\PYGZus{}func}\PYG{p}{(}\PYG{o}{*}\PYG{n}{args}\PYG{p}{,} \PYG{o}{**}\PYG{n}{kwargs}\PYG{p}{)}
    
    \PYG{k}{def} \PYG{n+nf}{reset}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{):}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{num\PYGZus{}calls} \PYG{o}{=} \PYG{l+m+mi}{0}
\end{Verbatim}
